<#+

void Print_Equatable()
{
#>
    //
    // AreEqual
    //

    public static void AreEqual<T>(T expected, T actual) where T: IEquatable<T>
    {      
      Type tType = typeof(T);
      if (tType == typeof(double) || tType == typeof(string))
      {
        throw new InvalidOperationException("Something went wrong.");
      }

      Assert.True(expected.Equals(actual), $"{expected}\n\nis not equal to\n\n{actual}\n");
    }

    public static void AreEqual(double expected, double actual)
    {
      AreEqual<Number>(expected, actual);
    }

    public static void AreEqual(string expected, string actual)
    {
      Assert.Equal(expected, actual);
    }    

    public static void AreEqual(uint expected, int actual)
    {
      Assert.True(expected == actual, $"{expected}\n\nis not equal to\n\n{actual}\n");
    }

    public static void AreEqual(int expected, uint actual)
    {
      Assert.True(expected == actual, $"{expected}\n\nis not equal to\n\n{actual}\n");
    }

    //
    // AreNotEqual
    //

    public static void AreNotEqual<T>(T expected, T actual) where T: IEquatable<T>
    {
      Type tType = typeof(T);
      if (tType == typeof(double) || tType == typeof(string))
      {
        throw new InvalidOperationException("Something went wrong.");
      }
      
      Assert.False(expected.Equals(actual), $"{expected}\n\nis equal to\n\n{actual}\n");      
    }

    public static void AreNotEqual(double expected, double actual)
    {
      AreNotEqual<Number>(expected, actual);
    }

    public static void AreNotEqual(string expected, string actual)
    {
      Assert.NotEqual(expected, actual);
    }        

    //
    // AreEquals
    //

    public static void AreEquals<T>(IEnumerable<T> expected, IEnumerable<T> actual)  where T: IEquatable<T>
    {
      T[] expectedArray = expected.ToArray();
      T[] actualArray = actual.ToArray();
      AreEqual(expectedArray.Length, actualArray.Length);
      for (int i = 0; i < expectedArray.Length; i++)
      {
        AreEqual<T>(expectedArray[i], actualArray[i]);
      }
    }

    public static void AreEquals<T>(IEnumerable<IEnumerable<T>> expected, IEnumerable<IEnumerable<T>> actual) where T : IEquatable<T>
    {
      IEnumerable<T>[] expectedArray = expected.ToArray();
      IEnumerable<T>[] actualArray = actual.ToArray();
      AreEqual(expectedArray.Length, actualArray.Length);
      for (int i = 0; i < expectedArray.Length; i++)
      {
        AreEquals<T>(expectedArray[i], actualArray[i]);
      }
    }

<#+
    foreach(string typeName in new[] { "double", "string"})
    {
#>
    public static void AreEquals(IEnumerable<<#= typeName #>> expected, IEnumerable<<#= typeName #>> actual)
    {
      <#= typeName #>[] expectedArray = expected.ToArray();
      <#= typeName #>[] actualArray = actual.ToArray();
      AreEqual(expectedArray.Length, actualArray.Length);
      for (int i = 0; i < expectedArray.Length; i++)
      {
        AreEqual(expectedArray[i], actualArray[i]);
      }
    }

    public static void AreEquals(IEnumerable<IEnumerable<<#= typeName #>>> expected, IEnumerable<IEnumerable<<#= typeName #>>> actual)
    {
      IEnumerable<<#= typeName #>>[] expectedArray = expected.ToArray();
      IEnumerable<<#= typeName #>>[] actualArray = actual.ToArray();
      AreEqual(expectedArray.Length, actualArray.Length);
      for (int i = 0; i < expectedArray.Length; i++)
      {
        AreEquals(expectedArray[i], actualArray[i]);
      }
    }

<#+
    }
}

void Print_AreExactlyEqual()
{
#>
    //
    // AreExactlyEqual
    //

    public static void AreExactlyEqual(double expected, double actual)
    {
      Assert.True(expected == actual, $"{expected} is not equal to {actual}\n");
    }

    public static void AreExactlyEqual(Number expected, Number actual)
    {
      AreExactlyEqual((double)expected, (double)actual);
    }

    public static void AreExactlyNotEqual(double expected, double actual)
    {
      Assert.False(expected == actual, $"{expected} is equal to {actual}\n");
    }    

    public static void AreExactlyNotEqual(Number expected, Number actual)
    {
      AreExactlyNotEqual((double)expected, (double)actual);
    }

    public static void IsExactlyZero(double actual)
    {
      Assert.True(0 == actual, $"{actual} is not zero");
    }

    public static void IsExactlyZero(Number actual)
    {
      IsExactlyZero((double)actual);
    }

    public static void AreExactlyEquals(IEnumerable<double> expected, IEnumerable<double> actual)
    {
      double[] expectedArray = expected.ToArray();
      double[] actualArray = actual.ToArray();
      AreEqual(expectedArray.Length, actualArray.Length);
      for (int i = 0; i < expectedArray.Length; i++)
      {
        AreExactlyEqual(expectedArray[i], actualArray[i]);
      }
    }

<#+
}

void Print_IsZero(string typeName)
{    
#>   
    //
    // IsZero
    //

    public static void IsZero(<#= typeName #> value)
    {
      AreEqual<<#= typeName #>>(0, value);
    }

    public static void IsNotZero(<#= typeName #> value)
    {
      AreNotEqual<<#= typeName #>>(0, value);
    }

<#+    
}

void Print_NumberExtensionCommon()
{    
#>   
    //
    // Number extensions
    //

    public static void IsZero(Number value)
    {
      AreEqual<Number>(0d, value);
    }

    public static void IsNotZero(Number value)
    {
      AreNotEqual<Number>(0d, value);
    }

<#+    
}

void Print_NumberExtension(string typeName)
{    
#>   
    //
    // <#= typeName #> to Number
    //

    public static void AreEqual(<#= typeName #> expected, Number actual)
    {
      Number expectedNumber = expected;
      AreEqual(expectedNumber, actual);            
    }

    public static void AreNotEqual(<#= typeName #> expected, Number actual)
    {
      Number expectedNumber = expected;
      AreNotEqual(expectedNumber, actual);            
    }

    public static void AreEquals(IEnumerable<<#= typeName #>> expected, IEnumerable<Number> actual)
    {
      AreEquals(expected.Select(v => (Number)v), actual);
    }

<#+    
}

void Print_Comparision(string typeName)
{    
#>   
    //
    // comparision operators for <#= typeName #>
    //

    public static void IsBetween(<#= typeName #> lower, <#= typeName #> high, <#= typeName #> value)
    {
      Assert.True(lower <= value  && value <= high, $"{value} is not between {lower} and {high}");
    }

    public static void IsGreaterThan(<#= typeName #> baseline, <#= typeName #> value)
    {
      Assert.True(value > baseline, $"{value} is not greater than {baseline}");
    }

    public static void IsGreaterEqualThan(<#= typeName #> baseline, <#= typeName #> value)
    {
      Assert.True(value >= baseline, $"{value} is not greater or equal than {baseline}");
    }

    public static void IsLowerThan(<#= typeName #> baseline, <#= typeName #> value)
    {
      Assert.True(value < baseline, $"{value} is not lower than {baseline}");
    }

    public static void IsLowerEqualThan(<#= typeName #> baseline, <#= typeName #> value)
    {
      Assert.True(value <= baseline, $"{value} is not lower or equal than {baseline}");
    }

    public static void IsNegative(<#= typeName #> value)
    {
      Assert.True(value < 0, $"{value} is not negative");
    }

    public static void IsPositive(<#= typeName #> value)
    {
      Assert.True(value > 0, $"{value} is not positive");
    }    

<#+    
}

void Print_Logical()
{
#>
    //
    // Logical
    //

    public static void IsTrue(bool value)
    {
      Assert.True(value);
    }

    public static void IsFalse(bool value)
    {
      Assert.False(value);
    }

<#+
}

void Print_Enumerable()
{
#>
    //
    // Enumerable
    //

    public static void IsEmpty<T>(IEnumerable<T> value)
    {
      AreEqual<uint>(0, value.Count());
    }

<#+
}

void Print_ExpectedErrors()
{
#>
    //
    // Expected errors
    //

    public static void Throws<T>(Action testCode) where T : Exception
    {
      Assert.Throws<T>(testCode);
    }

    public static void Throws<T>(Func<object> testCode) where T : Exception
    {
      Assert.Throws<T>(testCode);
    }

<#+
}



void PrintCommon()
{   
    Print_Equatable();    
    foreach(string typeName in new[] {"int", "uint", "long", "ulong"})
    {
        Print_Comparision(typeName);
        Print_IsZero(typeName);
    }
    Print_AreExactlyEqual();
    Print_NumberExtensionCommon();

    Print_Logical(); 
    Print_Enumerable();
    Print_ExpectedErrors();
}

#>