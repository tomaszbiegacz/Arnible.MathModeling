<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
<#

Dictionary<string, string> generatedTypes = new Dictionary<string, string>
{
    {"double", "double"},
    {"Number", "Number"}
};

#>
using System;
using System.Collections.Generic;

namespace Arnible.MathModeling
{
  public static class LinqAverage
  {
<#

foreach(var kv in generatedTypes)
{

#>
    /// <summary>
    /// Calculate items sum or throw ArgumentException if passed enumerable is empty
    /// </summary>
    public static <#= kv.Value #> AverageDefensive(this IEnumerable<<#= kv.Key #>> x)
    {
      if (x == null)
      {
        throw new ArgumentNullException(nameof(x));
      }
      <#= kv.Key #>[] items = x.ToArray();
      if (items.Length == 0)
      {
        throw new ArgumentNullException(nameof(x));
      }
      return items.SumDefensive() / items.Length;
    }
    
<#

}

#>
  }
}
