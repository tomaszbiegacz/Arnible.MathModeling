<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
<#

Dictionary<string, string> generatedTypes = new Dictionary<string, string>
{
  {"Number", "Number"}
};

#>
using System;
using System.Collections.Generic;

namespace Arnible.MathModeling
{
  public static class LinqSum
  {
<#

foreach(var kv in generatedTypes)
{

#>
    /// <summary>
    /// Calculate items sum or throw ArgumentException if passed enumerable is empty
    /// </summary>
    public static <#= kv.Value #> SumDefensive(this IEnumerable<<#= kv.Key #>> x)
    {      
      bool anyElement = false;
      <#= kv.Value #> current = 0;
      foreach (<#= kv.Key #> v in x)
      {
        current += v;
        anyElement = true;
      }
      if (!anyElement)
      {
        throw new ArgumentException("Empty enumerator");
      }
      return current;
    }        

    /// <summary>
    /// Calculate items sum or return 0 if passed enumerable is empty
    /// </summary>
    public static <#= kv.Value #> SumWithDefault(this IEnumerable<<#= kv.Key #>> x)
    {
      <#= kv.Value #> current = 0;
      foreach (<#= kv.Key #> v in x)
      {
        current += v;        
      }
      return current;
    }        
    
<#

}

#>
  }
}
